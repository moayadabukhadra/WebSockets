"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nwsapi";
exports.ids = ["vendor-chunks/nwsapi"];
exports.modules = {

/***/ "(ssr)/./node_modules/nwsapi/src/nwsapi.js":
/*!*******************************************!*\
  !*** ./node_modules/nwsapi/src/nwsapi.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n/*\n * Copyright (C) 2007-2024 Diego Perini\n * All rights reserved.\n *\n * nwsapi.js - Fast CSS Selectors API Engine\n *\n * Author: Diego Perini <diego.perini at gmail com>\n * Version: 2.2.16\n * Created: 20070722\n * Release: 20240927\n *\n * License:\n *  http://javascript.nwbox.com/nwsapi/MIT-LICENSE\n * Download:\n *  http://javascript.nwbox.com/nwsapi/nwsapi.js\n */ (function Export(global, factory) {\n    \"use strict\";\n    if (true) {\n        module.exports = factory;\n    } else {}\n})(void 0, function Factory(global, Export) {\n    var version = \"nwsapi-2.2.16\", doc = global.document, root = doc.documentElement, slice = Array.prototype.slice, HSP = \"[\\\\x20\\\\t]\", VSP = \"[\\\\r\\\\n\\\\f]\", WSP = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\", CFG = {\n        // extensions\n        operators: \"[~*^$|]=|=\",\n        combinators: \"[\\\\x20\\\\t>+~](?=[^>+~])\"\n    }, NOT = {\n        // not enclosed in double/single/parens/square\n        double_enc: '(?=(?:[^\"]*[\"][^\"]*[\"])*[^\"]*$)',\n        single_enc: \"(?=(?:[^']*['][^']*['])*[^']*$)\",\n        parens_enc: \"(?![^\\\\x28]*\\\\x29)\",\n        square_enc: \"(?![^\\\\x5b]*\\\\x5d)\"\n    }, REX = {\n        // regular expressions\n        HasEscapes: RegExp(\"\\\\\\\\\"),\n        HexNumbers: RegExp(\"^[0-9a-fA-F]\"),\n        EscOrQuote: RegExp(\"^\\\\\\\\|[\\\\x22\\\\x27]\"),\n        RegExpChar: RegExp(\"(?!\\\\\\\\)[\\\\\\\\^$.,*+?()[\\\\]{}|\\\\/]\", \"g\"),\n        TrimSpaces: RegExp(\"^\" + WSP + \"+|\" + WSP + \"+$|\" + VSP, \"g\"),\n        SplitGroup: RegExp(\"(\\\\([^)]*\\\\)|\\\\[[^[]*\\\\]|\\\\\\\\.|[^,])+\", \"g\"),\n        CommaGroup: RegExp(\"(\\\\s*,\\\\s*)\" + NOT.square_enc + NOT.parens_enc, \"g\"),\n        FixEscapes: RegExp(\"\\\\\\\\([0-9a-fA-F]{1,6}\" + WSP + \"?|.)|([\\\\x22\\\\x27])\", \"g\"),\n        CombineWSP: RegExp(\"[\\\\n\\\\r\\\\f\\\\x20]+\" + NOT.single_enc + NOT.double_enc, \"g\"),\n        TabCharWSP: RegExp(\"(\\\\x20?\\\\t+\\\\x20?)\" + NOT.single_enc + NOT.double_enc, \"g\"),\n        PseudosWSP: RegExp(\"\\\\s+([-+])\\\\s+\" + NOT.square_enc, \"g\")\n    }, STD = {\n        combinator: RegExp(\"\\\\s?([>+~])\\\\s?\", \"g\"),\n        apimethods: RegExp(\"^(?:\\\\w+|\\\\*)\\\\|\"),\n        namespaces: RegExp(\"^(?:[*|][\\\\w-]*)+\", \"g\")\n    }, GROUPS = {\n        // pseudo-classes requiring parameters\n        linguistic: \"(dir|lang)(?:\\\\x28\\\\s?([-\\\\w]{2,})\\\\s?\\\\x29)\",\n        logicalsel: \"(is|where|matches|not|has)(?:\\\\x28\\\\s?(\\\\[([^\\\\[\\\\]]*)\\\\]|[^()\\\\[\\\\]]*|.*)\\\\s?\\\\x29)\",\n        treestruct: \"(nth(?:-last)?(?:-child|-of\\\\-type))(?:\\\\x28\\\\s?(even|odd|(?:[-+]?\\\\d*)(?:n\\\\s?[-+]?\\\\s?\\\\d*)?)\\\\s?\\\\x29)\",\n        // pseudo-classes not requiring parameters\n        locationpc: \"(any\\\\-link|link|visited|target)\\\\b\",\n        useraction: \"(hover|active|focus\\\\-within|focus\\\\-visible|focus)\\\\b\",\n        structural: \"(root|empty|(?:(?:first|last|only)(?:-child|\\\\-of\\\\-type)))\\\\b\",\n        inputstate: \"(enabled|disabled|read\\\\-only|read\\\\-write|placeholder\\\\-shown|default)\\\\b\",\n        inputvalue: \"(checked|indeterminate|required|optional|valid|invalid|in\\\\-range|out\\\\-of\\\\-range)\\\\b\",\n        // pseudo-classes not requiring parameters and describing functional state\n        rsrc_state: \"(playing|paused|seeking|buffering|stalled|muted|volume-locked)\\\\b\",\n        disp_state: \"(open|closed|modal|fullscreen|picture-in-picture)\\\\b\",\n        time_state: \"(current|past|future)\\\\b\",\n        // pseudo-classes for parsing only selectors\n        pseudo_nop: \"(autofill|-webkit\\\\-autofill)\\\\b\",\n        // pseudo-elements starting with single colon (:)\n        pseudo_sng: \"(after|before|first\\\\-letter|first\\\\-line)\\\\b\",\n        // pseudo-elements starting with double colon (::)\n        pseudo_dbl: \":(after|before|first\\\\-letter|first\\\\-line|selection|placeholder|-webkit-[-a-zA-Z0-9]{2,})\\\\b\"\n    }, Patterns = {\n        // pseudo-classes\n        treestruct: RegExp(\"^:(?:\" + GROUPS.treestruct + \")(.*)\", \"i\"),\n        structural: RegExp(\"^:(?:\" + GROUPS.structural + \")(.*)\", \"i\"),\n        linguistic: RegExp(\"^:(?:\" + GROUPS.linguistic + \")(.*)\", \"i\"),\n        useraction: RegExp(\"^:(?:\" + GROUPS.useraction + \")(.*)\", \"i\"),\n        inputstate: RegExp(\"^:(?:\" + GROUPS.inputstate + \")(.*)\", \"i\"),\n        inputvalue: RegExp(\"^:(?:\" + GROUPS.inputvalue + \")(.*)\", \"i\"),\n        rsrc_state: RegExp(\"^:(?:\" + GROUPS.rsrc_state + \")(.*)\", \"i\"),\n        disp_state: RegExp(\"^:(?:\" + GROUPS.disp_state + \")(.*)\", \"i\"),\n        time_state: RegExp(\"^:(?:\" + GROUPS.time_state + \")(.*)\", \"i\"),\n        locationpc: RegExp(\"^:(?:\" + GROUPS.locationpc + \")(.*)\", \"i\"),\n        logicalsel: RegExp(\"^:(?:\" + GROUPS.logicalsel + \")(.*)\", \"i\"),\n        pseudo_nop: RegExp(\"^:(?:\" + GROUPS.pseudo_nop + \")(.*)\", \"i\"),\n        pseudo_sng: RegExp(\"^:(?:\" + GROUPS.pseudo_sng + \")(.*)\", \"i\"),\n        pseudo_dbl: RegExp(\"^:(?:\" + GROUPS.pseudo_dbl + \")(.*)\", \"i\"),\n        // combinator symbols\n        children: RegExp(\"^\" + WSP + \"?\\\\>\" + WSP + \"?(.*)\"),\n        adjacent: RegExp(\"^\" + WSP + \"?\\\\+\" + WSP + \"?(.*)\"),\n        relative: RegExp(\"^\" + WSP + \"?\\\\~\" + WSP + \"?(.*)\"),\n        ancestor: RegExp(\"^\" + WSP + \"+(.*)\"),\n        // universal & namespace\n        universal: RegExp(\"^(\\\\*)(.*)\"),\n        namespace: RegExp(\"^(\\\\*|[-\\\\w]+)?\\\\|(.*)\")\n    }, // regexp to better aproximate detection of RTL languages (Arabic)\n    RTL = RegExp(\"^(?:[\\\\u0627-\\\\u064a]|[\\\\u0591-\\\\u08ff]|[\\\\ufb1d-\\\\ufdfd]|[\\\\ufe70-\\\\ufefc])+$\"), // emulate firefox error strings\n    qsNotArgs = \"Not enough arguments\", qsInvalid = \" is not a valid selector\", // detect structural pseudo-classes in selectors\n    reNthElem = RegExp(\"(:nth(?:-last)?-child)\", \"i\"), reNthType = RegExp(\"(:nth(?:-last)?-of-type)\", \"i\"), // placeholder for global regexp\n    reOptimizer, reValidator, // special handling configuration flags\n    Config = {\n        IDS_DUPES: true,\n        ANODELIST: false,\n        LOGERRORS: true,\n        USR_EVENT: true,\n        VERBOSITY: true\n    }, NAMESPACE, QUIRKS_MODE, HTML_DOCUMENT, ATTR_STD_OPS = {\n        \"=\": 1,\n        \"^=\": 1,\n        \"$=\": 1,\n        \"|=\": 1,\n        \"*=\": 1,\n        \"~=\": 1\n    }, HTML_TABLE = {\n        \"accept\": 1,\n        \"accept-charset\": 1,\n        \"align\": 1,\n        \"alink\": 1,\n        \"axis\": 1,\n        \"bgcolor\": 1,\n        \"charset\": 1,\n        \"checked\": 1,\n        \"clear\": 1,\n        \"codetype\": 1,\n        \"color\": 1,\n        \"compact\": 1,\n        \"declare\": 1,\n        \"defer\": 1,\n        \"dir\": 1,\n        \"direction\": 1,\n        \"disabled\": 1,\n        \"enctype\": 1,\n        \"face\": 1,\n        \"frame\": 1,\n        \"hreflang\": 1,\n        \"http-equiv\": 1,\n        \"lang\": 1,\n        \"language\": 1,\n        \"link\": 1,\n        \"media\": 1,\n        \"method\": 1,\n        \"multiple\": 1,\n        \"nohref\": 1,\n        \"noresize\": 1,\n        \"noshade\": 1,\n        \"nowrap\": 1,\n        \"readonly\": 1,\n        \"rel\": 1,\n        \"rev\": 1,\n        \"rules\": 1,\n        \"scope\": 1,\n        \"scrolling\": 1,\n        \"selected\": 1,\n        \"shape\": 1,\n        \"target\": 1,\n        \"text\": 1,\n        \"type\": 1,\n        \"valign\": 1,\n        \"valuetype\": 1,\n        \"vlink\": 1\n    }, Combinators = {}, Selectors = {}, Operators = {\n        \"=\": {\n            p1: \"^\",\n            p2: \"$\",\n            p3: \"true\"\n        },\n        \"^=\": {\n            p1: \"^\",\n            p2: \"\",\n            p3: \"true\"\n        },\n        \"$=\": {\n            p1: \"\",\n            p2: \"$\",\n            p3: \"true\"\n        },\n        \"*=\": {\n            p1: \"\",\n            p2: \"\",\n            p3: \"true\"\n        },\n        \"|=\": {\n            p1: \"^\",\n            p2: \"(-|$)\",\n            p3: \"true\"\n        },\n        \"~=\": {\n            p1: \"(^|\\\\s)\",\n            p2: \"(\\\\s|$)\",\n            p3: \"true\"\n        }\n    }, concatCall = function(nodes, callback) {\n        var i = 0, l = nodes.length, list = Array(l);\n        while(l > i){\n            if (false === callback(list[i] = nodes[i])) break;\n            ++i;\n        }\n        return list;\n    }, concatList = function(list, nodes) {\n        var i = -1, l = nodes.length;\n        while(l--){\n            list[list.length] = nodes[++i];\n        }\n        return list;\n    }, toNodeList = function() {\n        // create a DocumentFragment\n        var emptyNL = global.document.createDocumentFragment().childNodes;\n        // this is returned from a self-executing function so that\n        // the DocumentFragment isn't repeatedly created.\n        return function(nodeArray) {\n            // check if it's already a nodelist.\n            if (nodeArray instanceof global.NodeList) return nodeArray;\n            // if it's a single element, wrap it in a classic array\n            if (!Array.isArray(nodeArray)) nodeArray = [\n                nodeArray\n            ];\n            // base an object on emptyNL\n            var fakeNL = Object.create(emptyNL, {\n                \"length\": {\n                    value: nodeArray.length,\n                    enumerable: false\n                },\n                \"item\": {\n                    \"value\": function(i) {\n                        return this[+i || 0];\n                    },\n                    enumerable: false\n                }\n            });\n            // copy the array elemnts\n            nodeArray.forEach(function(v, i) {\n                fakeNL[i] = v;\n            });\n            // return an object pretending to be a NodeList.\n            return fakeNL;\n        };\n    }(), documentOrder = function(a, b) {\n        if (!hasDupes && a === b) {\n            hasDupes = true;\n            return 0;\n        }\n        return a.compareDocumentPosition(b) & 4 ? -1 : 1;\n    }, hasDupes = false, unique = function(nodes) {\n        var i = 0, j = -1, l = nodes.length + 1, list = [];\n        while(--l){\n            if (nodes[i++] === nodes[i]) continue;\n            list[++j] = nodes[i - 1];\n        }\n        hasDupes = false;\n        return list;\n    }, switchContext = function(context, force) {\n        var oldDoc = doc;\n        doc = context.ownerDocument || context;\n        if (force || oldDoc !== doc) {\n            // force a new check for each document change\n            // performed before the next select operation\n            root = doc.documentElement;\n            HTML_DOCUMENT = isHTML(doc);\n            QUIRKS_MODE = HTML_DOCUMENT && doc.compatMode.indexOf(\"CSS\") < 0;\n            NAMESPACE = root && root.namespaceURI;\n            Snapshot.doc = doc;\n            Snapshot.root = root;\n        }\n        return Snapshot.from = context;\n    }, // convert single codepoint to UTF-16 encoding\n    codePointToUTF16 = function(codePoint) {\n        // out of range, use replacement character\n        if (codePoint < 1 || codePoint > 0x10ffff || codePoint > 0xd7ff && codePoint < 0xe000) {\n            return \"\\\\ufffd\";\n        }\n        // javascript strings are UTF-16 encoded\n        if (codePoint < 0x10000) {\n            var lowHex = \"000\" + codePoint.toString(16);\n            return \"\\\\u\" + lowHex.substr(lowHex.length - 4);\n        }\n        // supplementary high + low surrogates\n        return \"\\\\u\" + ((codePoint - 0x10000 >> 0x0a) + 0xd800).toString(16) + \"\\\\u\" + ((codePoint - 0x10000) % 0x400 + 0xdc00).toString(16);\n    }, // convert single codepoint to string\n    stringFromCodePoint = function(codePoint) {\n        // out of range, use replacement character\n        if (codePoint < 1 || codePoint > 0x10ffff || codePoint > 0xd7ff && codePoint < 0xe000) {\n            return \"�\";\n        }\n        if (codePoint < 0x10000) {\n            return String.fromCharCode(codePoint);\n        }\n        return String.fromCodePoint ? String.fromCodePoint(codePoint) : String.fromCharCode((codePoint - 0x10000 >> 0x0a) + 0xd800, (codePoint - 0x10000) % 0x400 + 0xdc00);\n    }, // convert escape sequence in a CSS string or identifier\n    // to javascript string with javascript escape sequences\n    convertEscapes = function(str) {\n        return REX.HasEscapes.test(str) ? str.replace(REX.FixEscapes, function(substring, p1, p2) {\n            // unescaped \" or '\n            return p2 ? \"\\\\\" + p2 : // javascript strings are UTF-16 encoded\n            REX.HexNumbers.test(p1) ? codePointToUTF16(parseInt(p1, 16)) : // \\' \\\"\n            REX.EscOrQuote.test(p1) ? substring : // \\g \\h \\. \\# etc\n            p1;\n        }) : str;\n    }, // convert escape sequence in a CSS string or identifier\n    // to javascript string with characters representations\n    unescapeIdentifier = function(str) {\n        return REX.HasEscapes.test(str) ? str.replace(REX.FixEscapes, function(substring, p1, p2) {\n            // unescaped \" or '\n            return p2 ? p2 : // javascript strings are UTF-16 encoded\n            REX.HexNumbers.test(p1) ? stringFromCodePoint(parseInt(p1, 16)) : // \\' \\\"\n            REX.EscOrQuote.test(p1) ? substring : // \\g \\h \\. \\# etc\n            p1;\n        }) : str;\n    }, method = {\n        \"#\": \"getElementById\",\n        \"*\": \"getElementsByTagNameNS\",\n        \"|\": \"getElementsByTagNameNS\",\n        \".\": \"getElementsByClassName\"\n    }, compat = {\n        \"#\": function(c, n) {\n            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));\n            return function(e, f) {\n                return byId(n, c);\n            };\n        },\n        \"*\": function(c, n) {\n            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));\n            return function(e, f) {\n                return byTag(n, c);\n            };\n        },\n        \"|\": function(c, n) {\n            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));\n            return function(e, f) {\n                return byTagNS(n, c);\n            };\n        },\n        \".\": function(c, n) {\n            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));\n            return function(e, f) {\n                return byClass(n, c);\n            };\n        }\n    }, // find duplicate ids using iterative walk\n    byIdRaw = function(id, context) {\n        var node = context, nodes = [], next = node.firstElementChild;\n        while(node = next){\n            node.id == id && (nodes[nodes.length] = node);\n            if (next = node.firstElementChild || node.nextElementSibling) continue;\n            while(!next && (node = node.parentElement) && node !== context){\n                next = node.nextElementSibling;\n            }\n        }\n        return nodes;\n    }, // context agnostic getElementById\n    byId = function(id, context) {\n        var e, i, l, nodes, api = method[\"#\"];\n        // duplicates id allowed\n        if (Config.IDS_DUPES === false) {\n            if (api in context) {\n                return (e = context[api](id)) ? [\n                    e\n                ] : none;\n            }\n        } else {\n            if (\"all\" in context) {\n                if (e = context.all[id]) {\n                    if (e.nodeType == 1) return e.getAttribute(\"id\") != id ? [] : [\n                        e\n                    ];\n                    else if (id == \"length\") return (e = context[api](id)) ? [\n                        e\n                    ] : none;\n                    for(i = 0, l = e.length, nodes = []; l > i; ++i){\n                        if (e[i].id == id) nodes[nodes.length] = e[i];\n                    }\n                    return nodes && nodes.length ? nodes : [\n                        nodes\n                    ];\n                } else return none;\n            }\n        }\n        return byIdRaw(id, context);\n    }, // wrapped up namespaced TagName api calls\n    byTagNS = function(context, tag) {\n        return byTag(tag, context);\n    }, // context agnostic getElementsByTagName\n    byTag = function(tag, context) {\n        var e, nodes, api = method[\"*\"];\n        // DOCUMENT_NODE (9) & ELEMENT_NODE (1)\n        if (api in context) {\n            return slice.call(context[api](\"*\", tag));\n        } else {\n            // DOCUMENT_FRAGMENT_NODE (11)\n            if (e = context.firstElementChild) {\n                tag = tag.toLowerCase();\n                if (!(e.nextElementSibling || tag == \"*\" || e.localName == tag)) {\n                    return slice.call(e[api](\"*\", tag));\n                } else {\n                    nodes = [];\n                    do {\n                        if (tag == \"*\" || e.localName == tag) nodes[nodes.length] = e;\n                        concatList(nodes, e[api](\"*\", tag));\n                    }while (e = e.nextElementSibling);\n                }\n            } else nodes = none;\n        }\n        return !Config.ANODELIST ? nodes : nodes instanceof global.NodeList ? nodes : toNodeList(nodes);\n    }, // context agnostic getElementsByClassName\n    byClass = function(cls, context) {\n        var e, nodes, api = method[\".\"], reCls;\n        // DOCUMENT_NODE (9) & ELEMENT_NODE (1)\n        if (api in context) {\n            return slice.call(context[api](cls));\n        } else {\n            // DOCUMENT_FRAGMENT_NODE (11)\n            if (e = context.firstElementChild) {\n                reCls = RegExp(\"(^|\\\\s)\" + cls + \"(\\\\s|$)\", QUIRKS_MODE ? \"i\" : \"\");\n                if (!(e.nextElementSibling || reCls.test(e.className))) {\n                    return slice.call(e[api](cls));\n                } else {\n                    nodes = [];\n                    do {\n                        if (reCls.test(e.className)) nodes[nodes.length] = e;\n                        concatList(nodes, e[api](cls));\n                    }while (e = e.nextElementSibling);\n                }\n            } else nodes = none;\n        }\n        return !Config.ANODELIST ? nodes : nodes instanceof global.NodeList ? nodes : toNodeList(nodes);\n    }, // namespace aware hasAttribute\n    // helper for XML/XHTML documents\n    hasAttributeNS = function(e, name) {\n        var i, l, attr = e.getAttributeNames();\n        name = RegExp(\":?\" + name + \"$\", HTML_DOCUMENT ? \"i\" : \"\");\n        for(i = 0, l = attr.length; l > i; ++i){\n            if (name.test(attr[i])) return true;\n        }\n        return false;\n    }, // fast resolver for the :nth-child() and :nth-last-child() pseudo-classes\n    nthElement = function() {\n        var idx = 0, len = 0, set = 0, parent = undefined, parents = Array(), nodes = Array();\n        return function(element, dir) {\n            // ensure caches are emptied after each run, invoking with dir = 2\n            if (dir == 2) {\n                idx = 0;\n                len = 0;\n                set = 0;\n                nodes.length = 0;\n                parents.length = 0;\n                parent = undefined;\n                return -1;\n            }\n            var e, i, j, k, l;\n            if (parent === element.parentElement) {\n                i = set;\n                j = idx;\n                l = len;\n            } else {\n                l = parents.length;\n                parent = element.parentElement;\n                for(i = -1, j = 0, k = l - 1; l > j; ++j, --k){\n                    if (parents[j] === parent) {\n                        i = j;\n                        break;\n                    }\n                    if (parents[k] === parent) {\n                        i = k;\n                        break;\n                    }\n                }\n                if (i < 0) {\n                    parents[i = l] = parent;\n                    l = 0;\n                    nodes[i] = Array();\n                    e = parent && parent.firstElementChild || element;\n                    while(e){\n                        nodes[i][l] = e;\n                        if (e === element) j = l;\n                        e = e.nextElementSibling;\n                        ++l;\n                    }\n                    set = i;\n                    idx = 0;\n                    len = l;\n                    if (l < 2) return l;\n                } else {\n                    l = nodes[i].length;\n                    set = i;\n                }\n            }\n            if (element !== nodes[i][j] && element !== nodes[i][j = 0]) {\n                for(j = 0, e = nodes[i], k = l - 1; l > j; ++j, --k){\n                    if (e[j] === element) {\n                        break;\n                    }\n                    if (e[k] === element) {\n                        j = k;\n                        break;\n                    }\n                }\n            }\n            idx = j + 1;\n            len = l;\n            return dir ? l - j : idx;\n        };\n    }(), // fast resolver for the :nth-of-type() and :nth-last-of-type() pseudo-classes\n    nthOfType = function() {\n        var idx = 0, len = 0, set = 0, parent = undefined, parents = Array(), nodes = Array();\n        return function(element, dir) {\n            // ensure caches are emptied after each run, invoking with dir = 2\n            if (dir == 2) {\n                idx = 0;\n                len = 0;\n                set = 0;\n                nodes.length = 0;\n                parents.length = 0;\n                parent = undefined;\n                return -1;\n            }\n            var e, i, j, k, l, name = element.localName;\n            if (nodes[set] && nodes[set][name] && parent === element.parentElement) {\n                i = set;\n                j = idx;\n                l = len;\n            } else {\n                l = parents.length;\n                parent = element.parentElement;\n                for(i = -1, j = 0, k = l - 1; l > j; ++j, --k){\n                    if (parents[j] === parent) {\n                        i = j;\n                        break;\n                    }\n                    if (parents[k] === parent) {\n                        i = k;\n                        break;\n                    }\n                }\n                if (i < 0 || !nodes[i][name]) {\n                    parents[i = l] = parent;\n                    nodes[i] || (nodes[i] = Object());\n                    l = 0;\n                    nodes[i][name] = Array();\n                    e = parent && parent.firstElementChild || element;\n                    while(e){\n                        if (e === element) j = l;\n                        if (e.localName == name) {\n                            nodes[i][name][l] = e;\n                            ++l;\n                        }\n                        e = e.nextElementSibling;\n                    }\n                    set = i;\n                    idx = j;\n                    len = l;\n                    if (l < 2) return l;\n                } else {\n                    l = nodes[i][name].length;\n                    set = i;\n                }\n            }\n            if (element !== nodes[i][name][j] && element !== nodes[i][name][j = 0]) {\n                for(j = 0, e = nodes[i][name], k = l - 1; l > j; ++j, --k){\n                    if (e[j] === element) {\n                        break;\n                    }\n                    if (e[k] === element) {\n                        j = k;\n                        break;\n                    }\n                }\n            }\n            idx = j + 1;\n            len = l;\n            return dir ? l - j : idx;\n        };\n    }(), // check if the document type is HTML\n    isHTML = function(node) {\n        var doc = node.ownerDocument || node;\n        return doc.nodeType == 9 && // contentType not in IE <= 11\n        \"contentType\" in doc ? doc.contentType.indexOf(\"/html\") > 0 : doc.createElement(\"DiV\").localName == \"div\";\n    }, // check focusable element\n    isFocusable = function(node) {\n        var doc = node.ownerDocument;\n        if (node.contentDocument && node.localName == \"iframe\") {\n            return false;\n        }\n        if (doc.hasFocus() && node == doc.activeElement) {\n            if (node.type || node.href || typeof node.tabIndex == \"number\") {\n                return true;\n            }\n        }\n        return false;\n    }, // check if node content is editable\n    isContentEditable = function(node) {\n        var attrValue = \"inherit\";\n        if (node.hasAttribute(\"contenteditable\")) {\n            attrValue = node.getAttribute(\"contenteditable\");\n        }\n        switch(attrValue){\n            case \"\":\n            case \"plaintext-only\":\n            case \"true\":\n                return true;\n            case \"false\":\n                return false;\n            default:\n                if (node.parentNode && node.parentNode.nodeType === 1) {\n                    return isContentEditable(node.parentNode);\n                }\n                return false;\n        }\n    }, // check media resources is playing\n    isPlaying = function(media) {\n        // for <audio>, <video>, <source> and <track> elements\n        var parent = media instanceof HTMLMediaElement ? null : media.parentElement;\n        return !!(media && media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2) || !!(parent && parent.currentTime > 0 && !parent.paused && !parent.ended && parent.readyState > 2);\n    }, // configure the engine to use special handling\n    configure = function(option, clear) {\n        if (typeof option == \"string\") {\n            return !!Config[option];\n        }\n        if (typeof option != \"object\") {\n            return Config;\n        }\n        for(var i in option){\n            Config[i] = !!option[i];\n        }\n        // clear lambda cache\n        if (clear) {\n            matchResolvers = {};\n            selectResolvers = {};\n        }\n        setIdentifierSyntax();\n        return true;\n    }, // centralized error and exceptions handling\n    emit = function(message, proto) {\n        var err;\n        if (Config.VERBOSITY) {\n            if (proto) {\n                err = new proto(message);\n            } else {\n                err = new global.DOMException(message, \"SyntaxError\");\n            }\n            throw err;\n        }\n        if (Config.LOGERRORS && console && console.log) {\n            console.log(message);\n        }\n    }, // execute the engine initialization code\n    initialize = function(doc) {\n        setIdentifierSyntax();\n        lastContext = switchContext(doc, true);\n    }, // build validation regexps used by the engine\n    setIdentifierSyntax = function() {\n        //\n        // NOTE: SPECIAL CASES IN CSS SYNTAX PARSING RULES\n        //\n        // The <EOF-token> https://drafts.csswg.org/css-syntax/#typedef-eof-token\n        // allow mangled|unclosed selector syntax at the end of selectors strings\n        //\n        // Literal equivalent hex representations of the characters: \" ' ` ] )\n        //\n        //     \\\\x22 = \" - double quotes    \\\\x5b = [ - open square bracket\n        //     \\\\x27 = ' - single quote     \\\\x5d = ] - closed square bracket\n        //     \\\\x60 = ` - back tick        \\\\x28 = ( - open round parens\n        //     \\\\x5c = \\ - back slash       \\\\x29 = ) - closed round parens\n        //\n        // using hex format prevents false matches of opened/closed instances\n        // pairs, coloring breakage and other editors highlightning problems.\n        //\n        var // non-ascii chars\n        noascii = \"[^\\\\x00-\\\\x9f]\", // escaped chars\n        escaped = \"\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-fA-F]\", // unicode chars\n        unicode = \"\\\\\\\\[0-9a-fA-F]{1,6}(?:\\\\r\\\\n|\\\\s)?\", // can start with single/double dash\n        // but it can not start with a digit\n        identifier = \"-?(?:[a-zA-Z_-]|\" + noascii + \"|\" + escaped + \"|\" + unicode + \")\" + \"(?:-{2}|[0-9]|[a-zA-Z_-]|\" + noascii + \"|\" + escaped + \"|\" + unicode + \")*\", pseudonames = \"[-\\\\w]+\", pseudoparms = \"(?:[-+]?\\\\d*)(?:n\\\\s?[-+]?\\\\s?\\\\d*)\", doublequote = '\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(?:\"|$)', singlequote = \"'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*(?:'|$)\", attrparser = identifier + \"|\" + doublequote + \"|\" + singlequote, attrvalues = \"([\\\\x22\\\\x27]?)((?!\\\\3)*|(?:\\\\\\\\?.)*?)(?:\\\\3|$)\", attributes = \"\\\\[\" + // attribute presence\n        \"(?:\\\\*\\\\|)?\" + WSP + \"?\" + \"(\" + identifier + \"(?::\" + identifier + \")?)\" + WSP + \"?\" + \"(?:\" + \"(\" + CFG.operators + \")\" + WSP + \"?\" + \"(?:\" + attrparser + \")\" + \")?\" + // attribute case sensitivity\n        \"(?:\" + WSP + \"?\\\\b(i))?\" + WSP + \"?\" + \"(?:\\\\]|$)\", attrmatcher = attributes.replace(attrparser, attrvalues), pseudoclass = \"(?:\\\\x28\" + WSP + \"*\" + \"(?:\" + pseudoparms + \"?)?|\" + // universal * &\n        // namespace *|*\n        \"(?:[*]|[\\\\w-])|\" + \"(?:\" + \"(?::\" + pseudonames + \"(?:\\\\x28\" + pseudoparms + \"?(?:\\\\x29|$))?|\" + \")|\" + \"(?:[.#]?\" + identifier + \")|\" + \"(?:\" + attributes + \")\" + \")+|\" + \"(?:\" + WSP + \"?[>+~][^>+~]\" + WSP + \"?)|\" + \"(?:\" + WSP + \"?,\" + WSP + \"?)|\" + \"(?:\" + WSP + \"?)|\" + \"(?:\\\\x29|$)\" + \")*\", standardValidator = \"(?=\" + WSP + \"?[^>+~(){}<>])\" + \"(?:\" + // universal * &\n        // namespace *|*\n        \"(?:[*|]|[\\\\w-]+)|\" + \"(?:[.#]?\" + identifier + \")+|\" + \"(?:\" + attributes + \")+|\" + \"(?:::?\" + pseudonames + pseudoclass + \")|\" + \"(?:\" + WSP + \"?\" + CFG.combinators + WSP + \"?)|\" + \"(?:\" + WSP + \"?,\" + WSP + \"?)|\" + \"(?:\" + WSP + \"?)\" + \")+\";\n        // the following global RE is used to return the\n        // deepest localName in selector strings and then\n        // use it to retrieve all possible matching nodes\n        // that will be filtered by compiled resolvers\n        reOptimizer = RegExp(\"(?:([.:#*]?)\" + \"(\" + identifier + \")\" + \"(?:\" + \":[-\\\\w]+|\" + \"\\\\[[^\\\\]]+(?:\\\\]|$)|\" + \"\\\\x28[^\\\\x29]+(?:\\\\x29|$)\" + \")*)$\");\n        // global\n        reValidator = RegExp(standardValidator, \"g\");\n        Patterns.id = RegExp(\"^#(\" + identifier + \")(.*)\");\n        Patterns.tagName = RegExp(\"^(\" + identifier + \")(.*)\");\n        Patterns.className = RegExp(\"^\\\\.(\" + identifier + \")(.*)\");\n        Patterns.attribute = RegExp(\"^(?:\" + attrmatcher + \")(.*)\");\n    }, F_INIT = '\"use strict\";return function Resolver(c,f,x,r)', S_HEAD = \"var e,n,o,j=r.length-1,k=-1\", M_HEAD = \"var e,n,o\", S_LOOP = \"main:while((e=c[++k]))\", N_LOOP = \"main:while((e=c.item(++k)))\", M_LOOP = \"e=c;\", S_BODY = \"r[++j]=c[k];\", N_BODY = \"r[++j]=c.item(k);\", M_BODY = \"\", S_TAIL = \"continue main;\", M_TAIL = \"r=true;\", S_TEST = \"if(f(c[k])){break main;}\", N_TEST = \"if(f(c.item(k))){break main;}\", M_TEST = \"f(c);\", S_VARS = [], M_VARS = [], // compile groups or single selector strings into\n    // executable functions for matching or selecting\n    compile = function(selector, mode, callback) {\n        var factory, token, head = \"\", loop = \"\", macro = \"\", source = \"\", vars = \"\";\n        // 'mode' can be boolean or null\n        // true = select / false = match\n        // null to use collection.item()\n        switch(mode){\n            case true:\n                if (selectLambdas[selector]) {\n                    return selectLambdas[selector];\n                }\n                macro = S_BODY + (callback ? S_TEST : \"\") + S_TAIL;\n                head = S_HEAD;\n                loop = S_LOOP;\n                break;\n            case false:\n                if (matchLambdas[selector]) {\n                    return matchLambdas[selector];\n                }\n                macro = M_BODY + (callback ? M_TEST : \"\") + M_TAIL;\n                head = M_HEAD;\n                loop = M_LOOP;\n                break;\n            case null:\n                if (selectLambdas[selector]) {\n                    return selectLambdas[selector];\n                }\n                macro = N_BODY + (callback ? N_TEST : \"\") + S_TAIL;\n                head = S_HEAD;\n                loop = N_LOOP;\n                break;\n            default:\n                break;\n        }\n        source = compileSelector(selector, macro, mode, callback);\n        loop += mode || mode === null ? \"{\" + source + \"}\" : source;\n        if (mode || mode === null && selector.includes(\":nth\")) {\n            loop += reNthElem.test(selector) ? \"s.nthElement(null, 2);\" : \"\";\n            loop += reNthType.test(selector) ? \"s.nthOfType(null, 2);\" : \"\";\n        }\n        if (S_VARS[0] || M_VARS[0]) {\n            vars = \",\" + (S_VARS.join(\",\") || M_VARS.join(\",\"));\n            S_VARS.length = 0;\n            M_VARS.length = 0;\n        }\n        factory = Function(\"s\", F_INIT + \"{\" + head + vars + \";\" + loop + \"return r;}\")(Snapshot);\n        return mode || mode === null ? selectLambdas[selector] = factory : matchLambdas[selector] = factory;\n    }, // build conditional code to check components of selector strings\n    compileSelector = function(expression, source, mode, callback) {\n        var a, b, n, f, k = 0, name, NS, referenceElement, compat, expr, match, result, status, symbol, test, type, selector = expression, selector_string, vars;\n        // original 'select' or 'match' selector string before normalization\n        selector_string = mode ? lastSelected : lastMatched;\n        // isolate selector combinators/components and normalize whitespace\n        selector = selector.replace(STD.combinator, \"$1\"); //.replace(STD.whitespace, ' ');\n        // javascript needs a label to break\n        // out of the while loops processing\n        selector_recursion_label: while(selector){\n            ++k;\n            // get namespace prefix if present or get first char of selector\n            symbol = STD.apimethods.test(selector) ? \"|\" : selector[0];\n            switch(symbol){\n                // universal resolver\n                case \"*\":\n                    match = selector.match(Patterns.universal);\n                    break;\n                // id resolver\n                case \"#\":\n                    match = selector.match(Patterns.id);\n                    source = \"if((/^\" + match[1] + '$/.test(e.getAttribute(\"id\")))){' + source + \"}\";\n                    break;\n                // class name resolver\n                case \".\":\n                    match = selector.match(Patterns.className);\n                    compat = (QUIRKS_MODE ? \"i\" : \"\") + '.test(e.getAttribute(\"class\"))';\n                    source = \"if((/(^|\\\\s)\" + match[1] + \"(\\\\s|$)/\" + compat + \")){\" + source + \"}\";\n                    break;\n                // tag name resolver\n                case /[_a-z]/i.test(symbol) ? symbol : undefined:\n                    match = selector.match(Patterns.tagName);\n                    source = 'if((e.localName==\"' + match[1] + '\")){' + source + \"}\";\n                    break;\n                // namespace resolver\n                case \"|\":\n                    match = selector.match(Patterns.namespace);\n                    if (match[1] == \"*\") {\n                        source = \"if(true){\" + source + \"}\";\n                    } else if (!match[1]) {\n                        source = \"if((!e.namespaceURI)){\" + source + \"}\";\n                    } else if (typeof match[1] == \"string\" && root.prefix == match[1]) {\n                        source = 'if((e.namespaceURI==\"' + NAMESPACE + '\")){' + source + \"}\";\n                    } else {\n                        emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                    }\n                    break;\n                // attributes resolver\n                case \"[\":\n                    match = selector.match(Patterns.attribute);\n                    NS = match[0].match(STD.namespaces);\n                    name = match[1];\n                    expr = name.split(\":\");\n                    expr = expr.length == 2 ? expr[1] : expr[0];\n                    if (match[2] && !(test = Operators[match[2]])) {\n                        emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                        return \"\";\n                    }\n                    if (match[4] === \"\") {\n                        test = match[2] == \"~=\" ? {\n                            p1: \"^\\\\s\",\n                            p2: \"+$\",\n                            p3: \"true\"\n                        } : match[2] in ATTR_STD_OPS && match[2] != \"~=\" ? {\n                            p1: \"^\",\n                            p2: \"$\",\n                            p3: \"true\"\n                        } : test;\n                    } else if (match[2] == \"~=\" && match[4].includes(\" \")) {\n                        break;\n                    } else if (match[4]) {\n                        match[4] = convertEscapes(match[4]).replace(REX.RegExpChar, \"\\\\$&\");\n                    }\n                    type = match[5] == \"i\" || HTML_DOCUMENT && HTML_TABLE[expr.toLowerCase()] ? \"i\" : \"\";\n                    source = \"if((\" + (!match[2] ? NS ? 's.hasAttributeNS(e,\"' + name + '\")' : 'e.hasAttribute&&e.hasAttribute(\"' + name + '\")' : !match[4] && ATTR_STD_OPS[match[2]] && match[2] != \"~=\" ? 'e.getAttribute&&e.getAttribute(\"' + name + '\")==\"\"' : \"(/\" + test.p1 + match[4] + test.p2 + \"/\" + type + ').test(e.getAttribute&&e.getAttribute(\"' + name + '\"))==' + test.p3) + \")){\" + source + \"}\";\n                    break;\n                // *** General sibling combinator\n                // E ~ F (F relative sibling of E)\n                case \"~\":\n                    match = selector.match(Patterns.relative);\n                    source = \"var N\" + k + \"=e;while(e&&(e=e.previousElementSibling)){\" + source + \"}e=N\" + k + \";\";\n                    break;\n                // *** Adjacent sibling combinator\n                // E + F (F adiacent sibling of E)\n                case \"+\":\n                    match = selector.match(Patterns.adjacent);\n                    source = \"var N\" + k + \"=e;if(e&&(e=e.previousElementSibling)){\" + source + \"}e=N\" + k + \";\";\n                    break;\n                // *** Descendant combinator\n                // E F (E ancestor of F)\n                case \"\t\":\n                case \" \":\n                    match = selector.match(Patterns.ancestor);\n                    source = \"var N\" + k + \"=e;while(e&&(e=e.parentElement)){\" + source + \"}e=N\" + k + \";\";\n                    break;\n                // *** Child combinator\n                // E > F (F children of E)\n                case \">\":\n                    match = selector.match(Patterns.children);\n                    source = \"var N\" + k + \"=e;if(e&&(e=e.parentElement)){\" + source + \"}e=N\" + k + \";\";\n                    break;\n                // *** user supplied combinators extensions\n                case symbol in Combinators ? symbol : undefined:\n                    // for other registered combinators extensions\n                    match[match.length - 1] = \"*\";\n                    source = Combinators[symbol](match) + source;\n                    break;\n                // *** tree-structural pseudo-classes\n                // :root, :empty, :first-child, :last-child, :only-child, :first-of-type, :last-of-type, :only-of-type\n                case \":\":\n                    if (match = selector.match(Patterns.structural)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"root\":\n                                // there can only be one :root element, so exit the loop once found\n                                source = \"if((e===s.root)){\" + source + (mode ? \"break main;\" : \"\") + \"}\";\n                                break;\n                            case \"empty\":\n                                // matches elements that don't contain elements or text nodes\n                                source = \"n=e.firstChild;while(n&&!(/1|3/).test(n.nodeType)){n=n.nextSibling}if(!n){\" + source + \"}\";\n                                break;\n                            // *** child-indexed pseudo-classes\n                            // :first-child, :last-child, :only-child\n                            case \"only-child\":\n                                source = \"if((!e.nextElementSibling&&!e.previousElementSibling)){\" + source + \"}\";\n                                break;\n                            case \"last-child\":\n                                source = \"if((!e.nextElementSibling)){\" + source + \"}\";\n                                break;\n                            case \"first-child\":\n                                source = \"if((!e.previousElementSibling)){\" + source + \"}\";\n                                break;\n                            // *** typed child-indexed pseudo-classes\n                            // :only-of-type, :last-of-type, :first-of-type\n                            case \"only-of-type\":\n                                source = \"o=e.localName;\" + \"n=e;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){\" + \"n=e;while((n=n.previousElementSibling)&&n.localName!=o);}if(!n){\" + source + \"}\";\n                                break;\n                            case \"last-of-type\":\n                                source = \"n=e;o=e.localName;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){\" + source + \"}\";\n                                break;\n                            case \"first-of-type\":\n                                source = \"n=e;o=e.localName;while((n=n.previousElementSibling)&&n.localName!=o);if(!n){\" + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.treestruct)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"nth-child\":\n                            case \"nth-of-type\":\n                            case \"nth-last-child\":\n                            case \"nth-last-of-type\":\n                                expr = /-of-type/i.test(match[1]);\n                                if (match[1] && match[2]) {\n                                    type = /last/i.test(match[1]);\n                                    if (match[2] == \"n\") {\n                                        source = \"if(true){\" + source + \"}\";\n                                        break;\n                                    } else if (match[2] == \"1\") {\n                                        test = type ? \"next\" : \"previous\";\n                                        source = expr ? \"n=e;o=e.localName;\" + \"while((n=n.\" + test + \"ElementSibling)&&n.localName!=o);if(!n){\" + source + \"}\" : \"if(!e.\" + test + \"ElementSibling){\" + source + \"}\";\n                                        break;\n                                    } else if (match[2] == \"even\" || match[2] == \"2n0\" || match[2] == \"2n+0\" || match[2] == \"2n\") {\n                                        test = \"n%2==0\";\n                                    } else if (match[2] == \"odd\" || match[2] == \"2n1\" || match[2] == \"2n+1\") {\n                                        test = \"n%2==1\";\n                                    } else {\n                                        f = /n/i.test(match[2]);\n                                        n = match[2].split(\"n\");\n                                        a = parseInt(n[0], 10) || 0;\n                                        b = parseInt(n[1], 10) || 0;\n                                        if (n[0] == \"-\") {\n                                            a = -1;\n                                        }\n                                        if (n[0] == \"+\") {\n                                            a = +1;\n                                        }\n                                        test = (b ? \"(n\" + (b > 0 ? \"-\" : \"+\") + Math.abs(b) + \")\" : \"n\") + \"%\" + a + \"==0\";\n                                        test = a >= +1 ? f ? \"n>\" + (b - 1) + (Math.abs(a) != 1 ? \"&&\" + test : \"\") : \"n==\" + a : a <= -1 ? f ? \"n<\" + (b + 1) + (Math.abs(a) != 1 ? \"&&\" + test : \"\") : \"n==\" + a : a === 0 ? n[0] ? \"n==\" + b : \"n>\" + (b - 1) : \"false\";\n                                    }\n                                    expr = expr ? \"OfType\" : \"Element\";\n                                    type = type ? \"true\" : \"false\";\n                                    source = \"n=s.nth\" + expr + \"(e,\" + type + \");if((\" + test + \")){\" + source + \"}\";\n                                } else {\n                                    emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                }\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.logicalsel)) {\n                        match[1] = match[1].toLowerCase();\n                        expr = match[2].replace(REX.CommaGroup, \",\").replace(REX.TrimSpaces, \"\");\n                        switch(match[1]){\n                            case \"is\":\n                            case \"where\":\n                            case \"matches\":\n                                source = 'if(s.match(\"' + expr.replace(/\\x22/g, '\\\\\"') + '\",e)){' + source + \"}\";\n                                break;\n                            case \"not\":\n                                source = 'if(!s.match(\"' + expr.replace(/\\x22/g, '\\\\\"') + '\",e)){' + source + \"}\";\n                                break;\n                            case \"has\":\n                                source = 'if(e.querySelector(\":scope ' + expr.replace(/\\x22/g, '\\\\\"') + '\")){' + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.linguistic)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"dir\":\n                                source = \"var p;if((\" + \"(/\" + match[2] + '/i.test(e.dir))||(p=s.ancestor(\"[dir]\", e))&&' + \"(/\" + match[2] + '/i.test(p.dir))||(e.dir==\"\"||e.dir==\"auto\")&&' + \"(\" + (match[2] == \"ltr\" ? \"!\" : \"\") + RTL + \".test(e.textContent)))\" + \"){\" + source + \"};\";\n                                break;\n                            case \"lang\":\n                                expr = \"(?:^|-)\" + match[2] + \"(?:-|$)\";\n                                source = \"var p;if((\" + '(e.isConnected&&(e.lang==\"\"&&(p=s.ancestor(\"[lang]\",e)))&&' + '(p.lang==\"' + match[2] + '\")||/' + expr + \"/i.test(e.lang)))\" + \"){\" + source + \"};\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.locationpc)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"any-link\":\n                                source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\")||e.visited)){' + source + \"}\";\n                                break;\n                            case \"link\":\n                                source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\"))){' + source + \"}\";\n                                break;\n                            case \"visited\":\n                                source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\")&&e.visited)){' + source + \"}\";\n                                break;\n                            case \"target\":\n                                source = \"if(((s.doc.compareDocumentPosition(e)&16)&&s.doc.location.hash&&e.id==s.doc.location.hash.slice(1))){\" + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.useraction)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"hover\":\n                                source = \"hasFocus\" in doc && doc.hasFocus() ? \"if(e===s.HOVER){\" + source + \"}\" : source;\n                                break;\n                            case \"active\":\n                                source = \"hasFocus\" in doc && doc.hasFocus() ? \"if(e===s.ACTIVE){\" + source + \"}\" : source;\n                                break;\n                            case \"focus\":\n                                source = \"hasFocus\" in doc ? \"if(s.isFocusable(e)&&e===s.doc.activeElement){\" + source + \"}\" : source;\n                                break;\n                            case \"focus-visible\":\n                                source = \"hasFocus\" in doc ? \"if(s.isFocusable(e)){\" + \"n=s.doc.activeElement;if(e!==n){while(e){e=e.parentElement;if(e===n)break;}}}\" + \"if((e===n&&e.autofocus)){\" + source + \"}\" : source;\n                                break;\n                            case \"focus-within\":\n                                source = \"hasFocus\" in doc ? \"if(s.isFocusable(e)){\" + \"n=s.doc.activeElement;if(n!==e){while(n){n=n.parentElement;if(n===e)break;}}}\" + \"if((n===e&&n.autofocus)){\" + source + \"}\" : source;\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.inputstate)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"enabled\":\n                                source = 'if(((\"form\" in e||/^optgroup$/i.test(e.localName))&&\"disabled\" in e &&e.disabled===false' + \")){\" + source + \"}\";\n                                break;\n                            case \"disabled\":\n                                // https://html.spec.whatwg.org/#enabling-and-disabling-form-controls:-the-disabled-attribute\n                                source = 'if(((\"form\" in e||/^optgroup$/i.test(e.localName))&&\"disabled\" in e)){' + // F is true if any of the fieldset elements in the ancestry chain has the disabled attribute specified\n                                // L is true if the first legend element of the fieldset contains the element\n                                \"var x=0,N=[],F=false,L=false;\" + \"if(!(/^(optgroup|option)$/i.test(e.localName))){\" + \"n=e.parentElement;\" + \"while(n){\" + 'if(n.localName==\"fieldset\"){' + \"N[x++]=n;\" + \"if(n.disabled===true){\" + \"F=true;\" + \"break;\" + \"}\" + \"}\" + \"n=n.parentElement;\" + \"}\" + \"for(var x=0;x<N.length;x++){\" + 'if((n=s.first(\"legend\",N[x]))&&n.contains(e)){' + \"L=true;\" + \"break;\" + \"}\" + \"}\" + \"}\" + \"if(e.disabled===true||(F&&!L)){\" + source + \"}}\";\n                                break;\n                            case \"read-only\":\n                                source = \"if((\" + \"(/^textarea$/i.test(e.localName)&&(e.readOnly||e.disabled))||\" + '(\"|date|datetime-local|email|month|number|password|search|tel|text|time|url|week|\".includes(\"|\"+e.type+\"|\")&&(e.readOnly||e.disabled))||' + \"!s.isContentEditable(e)\" + ')&&s.doc.designMode===\"off\"){' + source + \"}\";\n                                break;\n                            case \"read-write\":\n                                source = \"if(\" + \"(/^textarea$/i.test(e.localName)&&!e.readOnly&&!e.disabled)||\" + '(\"|date|datetime-local|email|month|number|password|search|tel|text|time|url|week|\".includes(\"|\"+e.type+\"|\")&&!e.readOnly&&!e.disabled)||' + 's.isContentEditable(e)||s.doc.designMode===\"on\"' + \"){\" + source + \"}\";\n                                break;\n                            case \"placeholder-shown\":\n                                source = \"if((\" + '(/^input|textarea$/i.test(e.localName))&&e.hasAttribute(\"placeholder\")&&' + '(\"|textarea|password|number|search|email|text|tel|url|\".includes(\"|\"+e.type+\"|\"))&&' + '(!s.match(\":focus\",e))' + \")){\" + source + \"}\";\n                                break;\n                            case \"default\":\n                                source = 'if((\"form\" in e && e.form)){' + \"var x=0;n=[];\" + 'if(e.type==\"image\")n=e.form.getElementsByTagName(\"input\");' + 'if(e.type==\"submit\")n=e.form.elements;' + \"while(n[x]&&e!==n[x]){\" + 'if(n[x].type==\"image\")break;' + 'if(n[x].type==\"submit\")break;' + \"x++;\" + \"}\" + \"}\" + 'if((e.form&&(e===n[x]&&\"|image|submit|\".includes(\"|\"+e.type+\"|\"))||' + \"((/^option$/i.test(e.localName))&&e.defaultSelected)||\" + '((\"|radio|checkbox|\".includes(\"|\"+e.type+\"|\"))&&e.defaultChecked)' + \")){\" + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.inputvalue)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"checked\":\n                                source = \"if((/^input$/i.test(e.localName)&&\" + '(\"|radio|checkbox|\".includes(\"|\"+e.type+\"|\")&&e.checked)||' + \"(/^option$/i.test(e.localName)&&(e.selected||e.checked))\" + \")){\" + source + \"}\";\n                                break;\n                            case \"indeterminate\":\n                                source = 'if((/^progress$/i.test(e.localName)&&!e.hasAttribute(\"value\"))||' + '(/^input$/i.test(e.localName)&&(\"checkbox\"==e.type&&e.indeterminate)||' + '(\"radio\"==e.type&&e.name&&!s.first(\"input[name=\"+e.name+\"]:checked\",e.form))' + \")){\" + source + \"}\";\n                                break;\n                            case \"required\":\n                                source = \"if((/^input|select|textarea$/i.test(e.localName)&&e.required)\" + \"){\" + source + \"}\";\n                                break;\n                            case \"optional\":\n                                source = \"if((/^input|select|textarea$/i.test(e.localName)&&!e.required)\" + \"){\" + source + \"}\";\n                                break;\n                            case \"invalid\":\n                                source = \"if(((\" + \"(/^form$/i.test(e.localName)&&!e.noValidate)||\" + \"(e.willValidate&&!e.formNoValidate))&&!e.checkValidity())||\" + '(/^fieldset$/i.test(e.localName)&&s.first(\":invalid\",e))' + \"){\" + source + \"}\";\n                                break;\n                            case \"valid\":\n                                source = \"if(((\" + \"(/^form$/i.test(e.localName)&&!e.noValidate)||\" + \"(e.willValidate&&!e.formNoValidate))&&e.checkValidity())||\" + '(/^fieldset$/i.test(e.localName)&&s.first(\":valid\",e))' + \"){\" + source + \"}\";\n                                break;\n                            case \"in-range\":\n                                source = \"if((/^input$/i.test(e.localName))&&\" + \"(e.willValidate&&!e.formNoValidate)&&\" + \"(!e.validity.rangeUnderflow&&!e.validity.rangeOverflow)&&\" + '(\"|date|datetime-local|month|number|range|time|week|\".includes(\"|\"+e.type+\"|\"))&&' + '(\"range\"==e.type||e.getAttribute(\"min\")||e.getAttribute(\"max\"))' + \"){\" + source + \"}\";\n                                break;\n                            case \"out-of-range\":\n                                source = \"if((/^input$/i.test(e.localName))&&\" + \"(e.willValidate&&!e.formNoValidate)&&\" + \"(e.validity.rangeUnderflow||e.validity.rangeOverflow)&&\" + '(\"|date|datetime-local|month|number|range|time|week|\".includes(\"|\"+e.type+\"|\"))&&' + '(\"range\"==e.type||e.getAttribute(\"min\")||e.getAttribute(\"max\"))' + \"){\" + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.rsrc_state)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"playing\":\n                                source = \"if(s.isPlaying(e)){\" + source + \"}\";\n                                break;\n                            case \"paused\":\n                                source = \"if(!s.isPlaying(e)){\" + source + \"}\";\n                                break;\n                            case \"seeking\":\n                                source = \"if(!s.isPlaying(e)){\" + source + \"}\";\n                                break;\n                            case \"buffering\":\n                                break;\n                            case \"stalled\":\n                                break;\n                            case \"muted\":\n                                source = 'if(e.localName==\"audio\"&&e.getAttribute(\"muted\")){' + source + \"}\";\n                                break;\n                            case \"volume-locked\":\n                                break;\n                            default:\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.pseudo_sng)) {\n                        source = 'if(e.element&&e.type.toLowerCase()==\"' + \":\" + match[0].toLowerCase() + '\"){e=e.element;' + source + \"}\";\n                    } else if (match = selector.match(Patterns.pseudo_dbl)) {\n                        source = 'if(e.element&&e.type.toLowerCase()==\"' + match[0].toLowerCase() + '\"){e=e.element;' + source + \"}\";\n                    } else if (match = selector.match(Patterns.pseudo_nop)) {\n                        break;\n                    } else {\n                        // reset\n                        expr = false;\n                        status = false;\n                        // process registered selector extensions\n                        for(expr in Selectors){\n                            if (match = selector.match(Selectors[expr].Expression)) {\n                                result = Selectors[expr].Callback(match, source, mode, callback);\n                                if (\"match\" in result) {\n                                    match = result.match;\n                                }\n                                vars = result.modvar;\n                                if (mode) {\n                                    // add extra select() vars\n                                    vars && S_VARS.indexOf(vars) < 0 && (S_VARS[S_VARS.length] = vars);\n                                } else {\n                                    // add extra match() vars\n                                    vars && M_VARS.indexOf(vars) < 0 && (M_VARS[M_VARS.length] = vars);\n                                }\n                                // extension source code\n                                source = result.source;\n                                // extension status code\n                                status = result.status;\n                                // break on status error\n                                if (status) {\n                                    break;\n                                }\n                            }\n                        }\n                        if (!status) {\n                            emit(\"unknown pseudo-class selector '\" + selector + \"'\");\n                            return \"\";\n                        }\n                        if (!expr) {\n                            emit(\"unknown token in selector '\" + selector + \"'\");\n                            return \"\";\n                        }\n                    }\n                    break;\n                default:\n                    emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                    break selector_recursion_label;\n            }\n            // end of switch symbol\n            if (!match) {\n                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                return \"\";\n            }\n            // pop last component\n            selector = match.pop();\n        }\n        // end of while selector\n        return source;\n    }, // replace ':scope' pseudo-class with element references\n    makeref = function(selectors, element) {\n        // DOCUMENT_NODE (9)\n        if (element.nodeType === 9) {\n            element = element.documentElement;\n        }\n        return selectors.replace(/:scope/ig, element.localName + (element.id ? \"#\" + element.id : \"\") + (element.className ? \".\" + element.classList[0] : \"\"));\n    }, // equivalent of w3c 'closest' method\n    ancestor = function _closest(selectors, element, callback) {\n        if (/:scope/i.test(selectors)) {\n            selectors = makeref(selectors, element);\n        }\n        while(element){\n            if (match(selectors, element, callback)) break;\n            element = element.parentElement;\n        }\n        return element;\n    }, match_assert = function(f, element, callback) {\n        for(var i = 0, l = f.length, r = false; l > i; ++i)f[i](element, callback, null, false) && (r = true);\n        return r;\n    }, match_collect = function(selectors, callback) {\n        for(var i = 0, l = selectors.length, f = []; l > i; ++i)f[i] = compile(selectors[i], false, callback);\n        return {\n            factory: f\n        };\n    }, // equivalent of w3c 'matches' method\n    match = function _matches(selectors, element, callback) {\n        var expressions, parsed;\n        if (element && matchResolvers[selectors]) {\n            return match_assert(matchResolvers[selectors].factory, element, callback);\n        }\n        lastMatched = selectors;\n        // arguments validation\n        if (arguments.length === 0) {\n            emit(qsNotArgs, TypeError);\n            return Config.VERBOSITY ? undefined : false;\n        } else if (arguments[0] === \"\") {\n            emit(\"''\" + qsInvalid);\n            return Config.VERBOSITY ? undefined : false;\n        }\n        // input NULL or UNDEFINED\n        if (typeof selectors != \"string\") {\n            selectors = \"\" + selectors;\n        }\n        if (/:scope/i.test(selectors)) {\n            selectors = makeref(selectors, element);\n        }\n        // normalize input string\n        parsed = selectors.replace(/\\x00|\\\\$/g, \"�\").replace(REX.CombineWSP, \" \").replace(REX.PseudosWSP, \"$1\").replace(REX.TabCharWSP, \"\t\").replace(REX.CommaGroup, \",\").replace(REX.TrimSpaces, \"\");\n        // parse, validate and split possible compound selectors\n        if ((expressions = parsed.match(reValidator)) && expressions.join(\"\") == parsed) {\n            expressions = parsed.match(REX.SplitGroup);\n            if (parsed[parsed.length - 1] == \",\") {\n                emit(qsInvalid);\n                return Config.VERBOSITY ? undefined : false;\n            }\n        } else {\n            emit(\"'\" + selectors + \"'\" + qsInvalid);\n            return Config.VERBOSITY ? undefined : false;\n        }\n        matchResolvers[selectors] = match_collect(expressions, callback);\n        return match_assert(matchResolvers[selectors].factory, element, callback);\n    }, // equivalent of w3c 'querySelector' method\n    first = function _querySelector(selectors, context, callback) {\n        if (arguments.length === 0) {\n            emit(qsNotArgs, TypeError);\n        }\n        return select(selectors, context, typeof callback == \"function\" ? function firstMatch(element) {\n            callback(element);\n            return false;\n        } : function firstMatch() {\n            return false;\n        })[0] || null;\n    }, // equivalent of w3c 'querySelectorAll' method\n    select = function _querySelectorAll(selectors, context, callback) {\n        var expressions, nodes = [], parsed, resolver;\n        context || (context = doc);\n        if (selectors) {\n            if (resolver = selectResolvers[selectors]) {\n                if (resolver.context === context && resolver.callback === callback) {\n                    var f = resolver.factory, h = resolver.htmlset, n = resolver.nodeset;\n                    if (n.length > 1) {\n                        for(var i = 0, l = n.length, list; l > i; ++i){\n                            list = compat[n[i][0]](context, n[i].slice(1))();\n                            if (f[i] !== null) {\n                                f[i](list, callback, context, nodes);\n                            } else {\n                                nodes = nodes.concat(list);\n                            }\n                        }\n                        if (l > 1 && nodes.length > 1) {\n                            nodes.sort(documentOrder);\n                            hasDupes && (nodes = unique(nodes));\n                        }\n                    } else {\n                        if (f[0]) {\n                            nodes = f[0](h[0](), callback, context, nodes);\n                        } else {\n                            nodes = h[0]();\n                        }\n                    }\n                    if (typeof callback == \"function\") {\n                        nodes = concatCall(nodes, callback);\n                    }\n                    return !Config.ANODELIST ? nodes : nodes instanceof global.NodeList ? nodes : toNodeList(nodes);\n                }\n            }\n        }\n        lastSelected = selectors;\n        // arguments validation\n        if (arguments.length === 0) {\n            emit(qsNotArgs, TypeError);\n            return Config.VERBOSITY ? undefined : none;\n        } else if (arguments[0] === \"\") {\n            emit(\"''\" + qsInvalid);\n            return Config.VERBOSITY ? undefined : none;\n        } else if (lastContext !== context) {\n            lastContext = switchContext(context);\n        }\n        // input NULL or UNDEFINED\n        if (typeof selectors != \"string\") {\n            selectors = \"\" + selectors;\n        }\n        if (/:scope/i.test(selectors)) {\n            selectors = makeref(selectors, context);\n        }\n        // normalize input string\n        parsed = selectors.replace(/\\x00|\\\\$/g, \"�\").replace(REX.CombineWSP, \" \").replace(REX.PseudosWSP, \"$1\").replace(REX.TabCharWSP, \"\t\").replace(REX.CommaGroup, \",\").replace(REX.TrimSpaces, \"\");\n        // parse, validate and split possible compound selectors\n        if ((expressions = parsed.match(reValidator)) && expressions.join(\"\") == parsed) {\n            expressions = parsed.match(REX.SplitGroup);\n            if (parsed[parsed.length - 1] == \",\") {\n                emit(qsInvalid);\n                return Config.VERBOSITY ? undefined : false;\n            }\n        } else {\n            emit(\"'\" + selectors + \"'\" + qsInvalid);\n            return Config.VERBOSITY ? undefined : false;\n        }\n        // save/reuse factory and closure collection\n        selectResolvers[selectors] = collect(expressions, context, callback);\n        nodes = selectResolvers[selectors].results;\n        if (typeof callback == \"function\") {\n            nodes = concatCall(nodes, callback);\n        }\n        return !Config.ANODELIST ? nodes : nodes instanceof global.NodeList ? nodes : toNodeList(nodes);\n    }, // optimize selectors avoiding duplicated checks\n    optimize = function(selector, token) {\n        var index = token.index, length = token[1].length + token[2].length;\n        return selector.slice(0, index) + (\" >+~\".indexOf(selector.charAt(index - 1)) > -1 ? \":[\".indexOf(selector.charAt(index + length + 1)) > -1 ? \"*\" : \"\" : \"\") + selector.slice(index + length - (token[1] == \"*\" ? 1 : 0));\n    }, // prepare factory resolvers and closure collections\n    collect = function(selectors, context, callback) {\n        var i, l, seen = {}, token = [\n            \"\",\n            \"*\",\n            \"*\"\n        ], optimized = selectors, factory = [], htmlset = [], nodeset = [], results = [], type;\n        for(i = 0, l = selectors.length; l > i; ++i){\n            if (!seen[selectors[i]] && (seen[selectors[i]] = true)) {\n                type = selectors[i].match(reOptimizer);\n                if (type && type[1] != \":\" && (token = type)) {\n                    token[1] || (token[1] = \"*\");\n                    optimized[i] = optimize(optimized[i], token);\n                } else {\n                    token = [\n                        \"\",\n                        \"*\",\n                        \"*\"\n                    ];\n                }\n            }\n            nodeset[i] = token[1] + token[2];\n            htmlset[i] = compat[token[1]](context, token[2]);\n            factory[i] = compile(optimized[i], true, null);\n            factory[i] ? factory[i](htmlset[i](), callback, context, results) : results.concat(htmlset[i]());\n        }\n        if (l > 1) {\n            results.sort(documentOrder);\n            hasDupes && (results = unique(results));\n        }\n        return {\n            callback: callback,\n            context: context,\n            factory: factory,\n            htmlset: htmlset,\n            nodeset: nodeset,\n            results: results\n        };\n    }, // QSA placeholders to native references\n    _closest, _matches, _querySelector, _querySelectorAll, _querySelectorDoc, _querySelectorAllDoc, // overrides QSA methods (only for browsers)\n    install = function(all) {\n        // save references\n        _closest = Element.prototype.closest;\n        _matches = Element.prototype.matches;\n        global.addEventListener(\"mousedown\", function(e) {\n            Snapshot.ACTIVE = e.target;\n        }, true);\n        global.addEventListener(\"mouseup\", function(e) {\n            Snapshot.ACTIVE = null;\n        }, true);\n        global.addEventListener(\"mouseover\", function(e) {\n            Snapshot.HOVER = e.target;\n        }, true);\n        global.addEventListener(\"mouseout\", function(e) {\n            Snapshot.HOVER = null;\n        }, true);\n        _querySelector = Element.prototype.querySelector;\n        _querySelectorAll = Element.prototype.querySelectorAll;\n        _querySelectorDoc = Document.prototype.querySelector;\n        _querySelectorAllDoc = Document.prototype.querySelectorAll;\n        function parseQSArgs() {\n            var method = arguments[arguments.length - 1];\n            return arguments.length < 2 ? method.apply(this, []) : arguments.length < 3 ? method.apply(this, [\n                arguments[0],\n                this\n            ]) : method.apply(this, [\n                arguments[0],\n                this,\n                typeof arguments[1] == \"function\" ? arguments[1] : undefined\n            ]);\n        }\n        Element.prototype.closest = HTMLElement.prototype.closest = function closest() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(ancestor));\n        };\n        Element.prototype.matches = HTMLElement.prototype.matches = function matches() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(match));\n        };\n        Element.prototype.querySelector = HTMLElement.prototype.querySelector = function querySelector() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(first));\n        };\n        Element.prototype.querySelectorAll = HTMLElement.prototype.querySelectorAll = function querySelectorAll() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(select));\n        };\n        Document.prototype.querySelector = DocumentFragment.prototype.querySelector = function querySelector() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(first));\n        };\n        Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = function querySelectorAll() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(select));\n        };\n        if (all) {\n            document.addEventListener(\"load\", function(e) {\n                var c, d, r, s, t = e.target;\n                if (/iframe/i.test(t.localName)) {\n                    c = \"(\" + Export + \")(this, \" + Factory + \");\";\n                    d = t.ownerDocument;\n                    s = d.createElement(\"script\");\n                    s.textContent = c + \"NW.Dom.install(true)\";\n                    r = d.documentElement;\n                    r.removeChild(r.insertBefore(s, r.firstChild));\n                }\n            }, true);\n        }\n    }, // restore QSA methods (only for browsers)\n    uninstall = function() {\n        // restore references\n        if (_closest) {\n            Element.prototype.closest = _closest;\n            HTMLElement.prototype.closest = _closest;\n        }\n        if (_matches) {\n            Element.prototype.matches = _matches;\n            HTMLElement.prototype.matches = _matches;\n        }\n        if (_querySelector) {\n            Element.prototype.querySelector = HTMLElement.prototype.querySelector = _querySelector;\n            Element.prototype.querySelectorAll = HTMLElement.prototype.querySelectorAll = _querySelector;\n        }\n        if (_querySelectorAllDoc) {\n            Document.prototype.querySelector = DocumentFragment.prototype.querySelector = _querySelectorDoc;\n            Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = _querySelectorAllDoc;\n        }\n    }, // empty set\n    none = Array(), // context\n    lastContext, // selector\n    lastMatched, lastSelected, // cached lambdas\n    matchLambdas = {}, selectLambdas = {}, // cached resolvers\n    matchResolvers = {}, selectResolvers = {}, // passed to resolvers\n    Snapshot = {\n        doc: doc,\n        from: doc,\n        root: root,\n        byTag: byTag,\n        first: first,\n        match: match,\n        ancestor: ancestor,\n        nthOfType: nthOfType,\n        nthElement: nthElement,\n        isFocusable: isFocusable,\n        isContentEditable: isContentEditable,\n        hasAttributeNS: hasAttributeNS\n    }, // public exported methods/objects\n    Dom = {\n        // exported cache objects\n        lastMatched: lastMatched,\n        lastSelected: lastSelected,\n        matchLambdas: matchLambdas,\n        selectLambdas: selectLambdas,\n        matchResolvers: matchResolvers,\n        selectResolvers: selectResolvers,\n        // exported compiler macros\n        CFG: CFG,\n        M_BODY: M_BODY,\n        S_BODY: S_BODY,\n        M_TEST: M_TEST,\n        S_TEST: S_TEST,\n        // exported engine methods\n        byId: byId,\n        byTag: byTag,\n        byClass: byClass,\n        match: match,\n        first: first,\n        select: select,\n        closest: ancestor,\n        compile: compile,\n        configure: configure,\n        emit: emit,\n        Config: Config,\n        Snapshot: Snapshot,\n        Version: version,\n        install: install,\n        uninstall: uninstall,\n        Operators: Operators,\n        Selectors: Selectors,\n        // register a new selector combinator symbol and its related function resolver\n        registerCombinator: function(combinator, resolver) {\n            var i = 0, l = combinator.length, symbol;\n            for(; l > i; ++i){\n                if (combinator[i] != \"=\") {\n                    symbol = combinator[i];\n                    break;\n                }\n            }\n            if (CFG.combinators.indexOf(symbol) < 0) {\n                CFG.combinators = CFG.combinators.replace(\"](\", symbol + \"](\");\n                CFG.combinators = CFG.combinators.replace(\"])\", symbol + \"])\");\n                Combinators[combinator] = resolver;\n                setIdentifierSyntax();\n            } else {\n                console.warn(\"Warning: the '\" + combinator + \"' combinator is already registered.\");\n            }\n        },\n        // register a new attribute operator symbol and its related function resolver\n        registerOperator: function(operator, resolver) {\n            var i = 0, l = operator.length, symbol;\n            for(; l > i; ++i){\n                if (operator[i] != \"=\") {\n                    symbol = operator[i];\n                    break;\n                }\n            }\n            if (CFG.operators.indexOf(symbol) < 0 && !Operators[operator]) {\n                CFG.operators = CFG.operators.replace(\"]=\", symbol + \"]=\");\n                Operators[operator] = resolver;\n                setIdentifierSyntax();\n            } else {\n                console.warn(\"Warning: the '\" + operator + \"' operator is already registered.\");\n            }\n        },\n        // register a new selector symbol and its related function resolver\n        registerSelector: function(name, rexp, func) {\n            Selectors[name] || (Selectors[name] = {\n                Expression: rexp,\n                Callback: func\n            });\n        }\n    };\n    initialize(doc);\n    return Dom;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nwsapi/src/nwsapi.js\n");

/***/ })

};
;